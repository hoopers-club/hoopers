---
import Bases from '../Layout/LayoutMenu.astro';
import Courtlist from '../components/Courtlist.jsx';

let allCourts = await Astro.fetchContent('./posts/courts/*.md');
allCourts=allCourts.sort((a,b)=> b.position-a.position);
---


<Bases>

	<div class="showbox">
		<div class="loader">
			<svg class="circular" viewBox="25 25 50 50">
				<circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>
			</svg>
		</div>
	</div>

	<!-- loads client info first then run js object -->
	<Courtlist allCourts={allCourts} client:load/>

	<script>
		const preloader = document.querySelector('.showbox');

		const fadeOutEffect = setInterval(() => {
			if (!preloader.style.opacity) {
				preloader.style.opacity = 1;
			}
			if (preloader.style.opacity > 0) {
				preloader.style.opacity -= 0.1;
			} else {
				clearInterval(fadeEffect);
			}
			preloader.remove();
		}, 300);


		const subtitle= document.querySelectorAll('.court-subtext');

		observer_court= new IntersectionObserver(entries=>{
			entries.forEach(entry => {
  
				if (entry.intersectionRatio>0) {
					entry.target.style.animation=`bounce-in-right 1s forwards`;
				}
				else {
					entry.target.style.animation=`none`;
				}
			});
		});

		subtitle.forEach(right => {
  			observer_court.observe(right);
		});

		const main= document.querySelectorAll('.court-headline');

		observer_countmain= new IntersectionObserver(entries=>{
			entries.forEach(entry => {
	
				if (entry.intersectionRatio>0) {
					entry.target.style.animation=`bounce-in-left 1s forwards`;
				}
				else {
					entry.target.style.animation=`none`;
				}
			});

		});


		main.forEach(right => {
			observer_countmain.observe(right);
		});


		const left= document.querySelectorAll('.left');

		observer_countleft= new IntersectionObserver(entries=>{
			entries.forEach(entry => {
	
				if (entry.intersectionRatio>0) {
					entry.target.style.animation=`slide-in-elliptic-left-bck 1s cubic-bezier(0.250, 0.460, 0.450, 0.940) forwards`;
				}
				else {
					entry.target.style.animation=`none`;
				}
			});

		});


		left.forEach(right => {
			observer_countleft.observe(right);
		});

		const right= document.querySelectorAll('.right');

		observer_countright= new IntersectionObserver(entries=>{
			entries.forEach(entry => {
	
				if (entry.intersectionRatio>0) {
					entry.target.style.animation=`slide-in-elliptic-right-bck 1s cubic-bezier(0.250, 0.460, 0.450, 0.940) forwards`;
				}
				else {
					entry.target.style.animation=`none`;
				}
			});

		});


		right.forEach(right => {
			observer_countright.observe(right);
		});


		
		window.addEventListener('load', fadeOutEffect);

	</script>
</Bases>