---
// Component Imports

import Menus from '../components/Menu.jsx'
import Search from '../components/Search.jsx'
import Footer from '../components/Footer.astro'

// You can import components from any supported Framework here!


// Component Script:
// You can write any JavaScript/TypeScript that you'd like here.
// It will run during the build, but never in the browser.
// All variables are available to use in the HTML template below.


// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---


<style lang="scss">

body {
    min-height:100vh;
    display:flex;
    flex-direction:column;
    
    }
   
</style>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <script defer src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
    <title>Hoopers</title>


        <link rel="shortcut icon" href="/assets/favicon.svg" type="image/x-icon">
    <link rel="stylesheet" href="{Astro.resolve('../styles/css/main.css')}">
    
 


</head>
<body>
    <main>
        <header>
            <Menus client:visible/>
        </header>

<slot/>
            </main>
<Search client:visible/>
               <!--
           - You can also use imported framework components directly in your markup!
           -
           - Note: by default, these components are NOT interactive on the client.
           - The `:visible` directive tells Astro to make it interactive.
           -
           - See https://docs.astro.build/core-concepts/component-hydration/ 
           -->

           <Footer/>


           <script>
  if (window.netlifyIdentity) {
    window.netlifyIdentity.on("init", user => {
      if (!user) {
        window.netlifyIdentity.on("login", () => {
          document.location.href = "/admin/";
        });
      }
    });
  }


  	
const right_i= document.querySelectorAll('.right-i')


observer= new IntersectionObserver(entries=>{
entries.forEach(entry => {
  
	if (entry.intersectionRatio>0) {
		entry.target.style.animation=`left 1s forwards ease-out`;
	}else{
		entry.target.style.animation=`none`;
	}
})
}, 
{rootMargin: "0px 0px -200px 0px"});


right_i.forEach(right => {
  observer.observe(right)
});

	const left_i= document.querySelectorAll('.left-i')

		observer_article= new IntersectionObserver(entries=>{
entries.forEach(entry => {
  
	if (entry.intersectionRatio>0) {
		entry.target.style.animation=`right 1s forwards ease-out`;
	}else{
		entry.target.style.animation=`right 1s backwards ease-out`;
	}
})
}, 
{rootMargin: "0px 0px -200px 0px"})

	left_i.forEach(left => {
  observer_article.observe(left)
});
	const down_i= document.querySelectorAll('.down-i')

		observer_= new IntersectionObserver(entries=>{
entries.forEach(entry => {
  
	if (entry.intersectionRatio>0) {
		entry.target.style.animation=`down 2s ${entry.target.dataset.delay?entry.target.dataset.delay:'0s'} forwards ease-out`;
	}else{
		entry.target.style.animation=`none`;
	}
})
}, 
{rootMargin: "0px 0px -200px 0px"})

	down_i.forEach(down => {
  observer_.observe(down)
});

</script>
</body>
</html>
